// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  subscription  Subscription?
  comments      Comment[]
}

enum Role {
  USER
  ADMIN
}

model Subscription {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId        String
  plan          Plan     @relation(fields: [planId], references: [id])
  status        String   @default("active") // active, canceled, expired
  startDate     DateTime @default(now())
  endDate       DateTime
  stripeCustomerId String?
  stripeSubscriptionId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Plan {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  duration    Int      // in days
  features    String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subscriptions Subscription[]
}

model Content {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String?
  content     String
  image       String?
  isPremium   Boolean  @default(false)
  isApproved  Boolean  @default(false)
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  comments    Comment[]
}

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  contents    Content[]
}

model Comment {
  id          String   @id @default(cuid())
  content     String
  isApproved  Boolean  @default(false)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  contentId   String
  contentItem Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
